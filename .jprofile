#!/bin/bash

#/*******************************************************/
#/***** Jenkins            functions              *******/
#/*******************************************************/

JENKINS_HOME_LOCAL_PROFILE=~/.jprofile/.jprofile
JENKINS_HOME_LOCAL_USER=~/.jenkins
[ ! -d ${JENKINS_HOME_LOCAL_USER} ] && mkdir -p ${JENKINS_HOME_LOCAL_USER}

   jflist(){ grep '(){'  ${JENKINS_HOME_LOCAL_PROFILE} | sed -e 's/(){/^/g' | cut -d'^' -f1 | sed -e 's/ //g' | sort -u ; }

jenv(){

    JENKINS_URL="${1}"  #/--- EG. 'http://192.168.7.2:30000'
   JENKINS_USER=${2}
  JENKINS_TOKEN=${3}
   JENKINS_AUTH="${JENKINS_USER}:${JENKINS_TOKEN}"

    [ ! -d ${JENKINS_HOME_LOCAL_USER} ] && mkdir -p ${JENKINS_HOME_LOCAL_USER}
    cd ${JENKINS_HOME_LOCAL_USER}
    rm -f jenkins-cli.jar
    wget ${JENKINS_URL}/jnlpJars/jenkins-cli.jar
}

    jhelp(){ cd ${JENKINS_HOME_LOCAL_USER} ; java -jar jenkins-cli.jar -s ${JENKINS_URL} -auth ${JENKINS_AUTH} help ; }
 jplugins(){ cd ${JENKINS_HOME_LOCAL_USER} ; java -jar jenkins-cli.jar -s ${JENKINS_URL} -auth ${JENKINS_AUTH} list-plugins ; }
    kbash(){ K8S_SERVICE_NAME=$( kubectl get pods -n ${1} | grep ${2} | head -1 | awk '{print $1}') ; kubectl exec -it --stdin --tty ${K8S_SERVICE_NAME} -n ${1} -- /bin/bash ;}

jinstall(){
            # JENKINS_PLUGIN='https://updates.jenkins-ci.org/download/plugins/gitbucket/0.8/gitbucket.hpi'
            JENKINS_PLUGIN="${1}"
            cd ${JENKINS_HOME_LOCAL_USER}
            java -jar jenkins-cli.jar -s ${JENKINS_URL} -auth ${JENKINS_AUTH} install-plugin ${JENKINS_PLUGIN}
          }

#jetchosts(){
   # //--- JENKINS HOSTS ----------//
   # echo '140.82.121.4 github.com' >> /etc/hosts
   # echo '199.232.46.132 deb.debian.org' >> /etc/hosts
   # echo '151.101.194.132 security.debian.org' >> /etc/hosts
   # echo '185.199.111.133 raw.githubusercontent.com' >> /etc/hosts
#}

#/*******************************************************/
#/***** Jenkins/kubernetes functions              *******/
#/*******************************************************/

kcr8jenkins(){
  
  cd ${JENKINS_HOME_LOCAL_USER}
  rm -rf jenkins-kubernetes-pod
  git clone https://github.com/karlring-devops/jenkins-kubernetes-pod.git
  
  cd ${JENKINS_HOME_LOCAL_USER}/jenkins-kubernetes-pod/
  #/---- REMOVED FILES in GIT NOW ------//# . ./setup_jenkins_kubernetes.sh
  
  kubectl create -f jenkins-namespace.yaml
  kubectl apply -f jenkins-role.yaml
  kubectl apply -f jenkins-role-bind.yaml
  kubectl create serviceaccount jenkins-admin-sa -n jenkins
  kubectl create clusterrolebinding jenkins-admin-sa --clusterrole=cluster-admin --serviceaccount=jenkins:jenkins-admin-sa -n jenkins

  kubectl create -f create-pv-jenkins.yaml
  kubectl create -f create-pv-claim-jenkins.yaml
  kubectl create -f jenkins-deployment.yaml
  kubectl create -f jenkins-service.yaml --validate=false
  kubectl create -f jenkins-service-jnlp.yaml
  kubectl scale -n jenkins deployment jenkins --replicas=1
}

kdeljenkins(){
  kubectl delete namespace jenkins
  kubectl delete persistentvolume pv-volume-jenkins
  kubectl delete persistentvolume pv-volume-jenkins
  kubectl delete clusterrolebinding jenkins-admin-sa
}

kgetloginJenkins(){
        K8S_MASTER_IP=$(kubectl get nodes -o wide | grep master | awk '{ print $6 }' ;) 
    JENKINS_NODE_PORT=$(kubectl get services --namespace jenkins | grep 'NodePort' | awk '{print $5}' | sed -e 's|\/|:|g' | awk -F':' '{print $2}' ; )
     K8S_SERVICE_NAME=$(kubectl get pods -n jenkins | grep jenkins | head -1 | awk '{print $1}' ; )
  JENKINS_INIT_PASSWD=$(kubectl exec ${K8S_SERVICE_NAME} -n jenkins -- cat /var/jenkins_home/secrets/initialAdminPassword)

    cat <<EOF
    http://${K8S_MASTER_IP}:${JENKINS_NODE_PORT}
    ${JENKINS_INIT_PASSWD}
EOF
}

kgetsecJenkins(){
  kubectl auth can-i list pods --namespace jenkins --as jenkins-admin-sa
  kubectl get serviceaccounts -n jenkins
  kubectl get roles -n jenkins -o wide
  kubectl get rolebindings -n jenkins
  kubectl get serviceaccounts/jenkins-admin-sa -o yaml -n jenkins
  kubectl cluster-info
}

kbackuplist(){
  LOCAL_ARCHIVE_DIR=~/uga/data/backup/jenkins
  ls -alhtr ${LOCAL_ARCHIVE_DIR}/backup_* 
}


kjgetplugin(){
    wget https://updates.jenkins.io/download/plugins/backup/1.6.1/backup.hpi
}

kjbackup(){
  
    LOCAL_ARCHIVE_DIR=~/uga/data/backup/jenkins
       K8S_NAME_SPACE=${1} 
  JENKINS_BACKUP_FILE=${2}
         K8S_POD_NAME=$(kubectl get pods -n ${K8S_NAME_SPACE} | grep ${K8S_NAME_SPACE} | awk '{print $1}')
   JENKINS_REMOTE_DIR=/tmp/data/backup/jenkins

    [ ! -d ${LOCAL_ARCHIVE_DIR} ] && mkdir -p ${LOCAL_ARCHIVE_DIR}
    kubectl cp ${K8S_NAME_SPACE}/${K8S_POD_NAME}:${JENKINS_REMOTE_DIR}/${JENKINS_BACKUP_FILE} ${LOCAL_ARCHIVE_DIR}/${JENKINS_BACKUP_FILE}
    echo 
    cat <<EOF
      #/***********************************/
      #/*** Download: Jenkins Backups
      #/***********************************/
      HOST : $(hostname)
      PWD  : ${LOCAL_ARCHIVE_DIR}
EOF
    echo && ls -alhtr ${LOCAL_ARCHIVE_DIR}/*.zip
}

kjrestore(){
 
    LOCAL_ARCHIVE_DIR=~/uga/data/backup/jenkins
       K8S_NAME_SPACE=${1} 
  JENKINS_BACKUP_FILE=${2}
         K8S_POD_NAME=$(kubectl get pods -n ${K8S_NAME_SPACE} | grep ${K8S_NAME_SPACE} | awk '{print $1}')
   JENKINS_REMOTE_DIR=/tmp/data/backup/jenkins

 cat <<EOF
#/***********************************/
#/*** Upload: Jenkins Backups
#/***********************************/
PWD                 :   ${LOCAL_ARCHIVE_DIR}
JENKINS_BACKUP_FILE :   ${JENKINS_BACKUP_FILE}
JENKINS_REMOTE_DIR  :   ${JENKINS_REMOTE_DIR}

EOF
    kubectl exec -it --namespace=${K8S_NAME_SPACE} ${K8S_POD_NAME} -- bash -c "mkdir -p ${JENKINS_REMOTE_DIR}"
    kubectl cp ${LOCAL_ARCHIVE_DIR}/${JENKINS_BACKUP_FILE} ${K8S_NAME_SPACE}/${K8S_POD_NAME}:${JENKINS_REMOTE_DIR}/${JENKINS_BACKUP_FILE}
    echo && pwd && echo 
    kubectl exec -it --namespace=${K8S_NAME_SPACE} ${K8S_POD_NAME} -- bash -c "ls -alhtr ${JENKINS_REMOTE_DIR}"  
    kbash ${K8S_NAME_SPACE} ${K8S_POD_NAME}
}


kjgetBackups(){

  REMOTE_ARCHIVE_DIR=/home/vagrant/uga/data/backup/jenkins
  LOCAL_ARCHIVE_DIR=/Volumes/uga/data/backup/jenkins
  IP_REMOTE=192.168.7.2
  SSH_USER=vagrant

cat <<EOF
#/***********************************/
#/*** Download: Jenkins Backups
#/***********************************/
PWD=${LOCAL_ARCHIVE_DIR}

EOF

  BACKUP_FILES=$(ssh ${SSH_USER}@${IP_REMOTE} "ls -1 /home/vagrant/uga/data/backup/jenkins|egrep 'zip|gz'")
  [ ! -d ${LOCAL_ARCHIVE_DIR} ] && mkdir -p ${LOCAL_ARCHIVE_DIR}
  [ -d ${LOCAL_ARCHIVE_DIR} ] && cd ${LOCAL_ARCHIVE_DIR}

  for b in ${BACKUP_FILES}
   do
        ls -alh ${REMOTE_ARCHIVE_DIR}/${b}
        scp -rp ${SSH_USER}@${IP_REMOTE}:${REMOTE_ARCHIVE_DIR}/${b} .
   done
  
  ls -alhtr ${LOCAL_ARCHIVE_DIR}

} 

